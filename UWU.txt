Valer primero te paso el modelo de verificaciones.

CalendarioVerificacion.php:

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Carbon;

/**
 * Cada fila representa una "ventana" de verificación para un estado y una terminación.
 *
 * Tabla: calendario_verificacion
 * Campos: id, regla_id, estado, terminacion, mes_inicio, mes_fin, semestre, frecuencia,
 *         anio, vigente_desde, vigente_hasta, timestamps
 */
class CalendarioVerificacion extends Model
{
    protected $table = 'calendario_verificacion';

    protected $fillable = [
        'regla_id',
        'estado',
        'terminacion',
        'mes_inicio',
        'mes_fin',
        'semestre',
        'frecuencia',
        'anio',
        'vigente_desde',
        'vigente_hasta',
    ];

    protected $casts = [
        'semestre'      => 'integer',
        'terminacion'   => 'integer',
        'mes_inicio'    => 'integer',
        'mes_fin'       => 'integer',
        'anio'          => 'integer',
        'vigente_desde' => 'date',
        'vigente_hasta' => 'date',
    ];

    /* ===================== Relaciones ===================== */
    public function regla()
    {
        // Si no usas el modelo, no pasará nada.
        return $this->belongsTo(\App\Models\VerificacionRegla::class, 'regla_id');
    }

    public function verificaciones()
    {
        return $this->hasMany(\App\Models\Verificacion::class, 'calendario_id');
    }

    /* ===================== Accessors/Helpers ===================== */

    /** Etiqueta tipo "May-Jun". */
    public function getEtiquetaBimestreAttribute(): string
    {
        $meses = [null,'Ene','Feb','Mar','Abr','May','Jun','Jul','Ago','Sep','Oct','Nov','Dic'];
        $ini = $meses[$this->mes_inicio] ?? $this->mes_inicio;
        $fin = $meses[$this->mes_fin]    ?? $this->mes_fin;
        return "{$ini}-{$fin}";
    }

    /** "1er semestre" | "2º semestre" | null */
    public function getEtiquetaSemestreAttribute(): ?string
    {
        return $this->semestre ? ($this->semestre === 1 ? '1er semestre' : '2º semestre') : null;
    }

    /** Alias legible para mostrar la ventana. */
    public function getVentanaAttribute(): string
    {
        return $this->etiqueta_bimestre;
    }

    /** ¿La fecha dada cae dentro de la ventana vigente? */
    public function contieneFecha(null|string|\DateTimeInterface $fecha): bool
    {
        if (!$this->vigente_desde || !$this->vigente_hasta) return false;
        $f = $fecha ? Carbon::parse($fecha) : Carbon::now();
        return $f->between($this->vigente_desde, $this->vigente_hasta);
    }

    /** ¿La ventana ya venció respecto a la fecha dada (o hoy)? */
    public function estaVencida(null|string|\DateTimeInterface $ref = null): bool
    {
        if (!$this->vigente_hasta) return false;
        $f = $ref ? Carbon::parse($ref) : Carbon::now();
        return $f->gt($this->vigente_hasta);
    }

    /** Último dígito de una placa. */
    public static function terminacionDePlaca(?string $placa): ?int
    {
        if (!$placa) return null;
        if (preg_match('/(\d)\s*$/', $placa, $m)) return (int)$m[1];
        return null;
    }

    /* ===================== Scopes ===================== */

    public function scopeAnio($q, ?int $anio)
    {
        return $anio ? $q->where('anio', $anio) : $q;
    }

    public function scopeEstadoTerminacion($q, ?string $estado, ?int $terminacion)
    {
        if ($estado !== null && $estado !== '') {
            $q->whereRaw('UPPER(estado) = ?', [mb_strtoupper($estado)]);
        }
        if ($terminacion !== null) {
            $q->where('terminacion', (int)$terminacion);
        }
        return $q;
    }
}

Vehiculo.php

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use App\Models\VehiculoFoto;
use App\Models\TarjetaSiVale; // ← importe explícito para la relación belongsTo

/**
 * Class Vehiculo
 *
 * @property int         $id
 * @property string|null $ubicacion
 * @property string|null $propietario
 * @property string|null $unidad
 * @property string|null $marca
 * @property int|null    $anio
 * @property string|null $serie
 * @property string|null $motor
 * @property string|null $placa
 * @property string|null $estado
 * @property int|null    $tarjeta_si_vale_id
 * @property string|null $nip
 * @property string|null $fec_vencimiento
 * @property string|null $vencimiento_t_circulacion
 * @property string|null $cambio_placas
 * @property string|null $poliza_hdi
 * @property string|null $poliza_latino
 * @property string|null $poliza_qualitas
 * @property float|null  $rend
 * @property int|null    $kilometros  Odómetro actual del vehículo
 */
class Vehiculo extends Model
{
    use HasFactory;

    protected $table = 'vehiculos';

    // Atributos que deseas siempre en MAYÚSCULAS
    public const UPPERCASE = [
        'ubicacion',
        'propietario',
        'unidad',
        'marca',
        'serie',
        'motor',
        'placa',
        'estado',
        'poliza_hdi',
        'poliza_latino',
        'poliza_qualitas',
    ];

    protected $fillable = [
        'ubicacion',
        'propietario',
        'unidad',
        'marca',
        'anio',
        'serie',
        'motor',
        'placa',
        'estado',
        'tarjeta_si_vale_id',
        'nip',
        'fec_vencimiento',
        'vencimiento_t_circulacion',
        'cambio_placas',
        'poliza_hdi',
        'poliza_latino',  
        'poliza_qualitas', 
        'rend',
        'kilometros', 
    ];

    protected $casts = [
        'rend'       => 'float',
        'kilometros' => 'integer', // 👈 cast del odómetro
        // Descomenta si esas columnas son DATE/DATETIME en BD:
        // 'fec_vencimiento' => 'date',
        // 'vencimiento_t_circulacion' => 'date',
        // 'cambio_placas' => 'date',
    ];

    /**
     * Normalización a MAYÚSCULAS antes de guardar.
     */
    protected static function booted()
    {
        static::saving(function (self $vehiculo) {
            foreach (self::UPPERCASE as $attr) {
                $value = $vehiculo->{$attr};
                if (is_string($value)) {
                    $value = preg_replace('/\s+/u', ' ', trim($value)); // normaliza espacios
                    $vehiculo->{$attr} = Str::upper($value);            // respeta acentos/ñ
                }
            }
        });
    }

    // ========= RELACIONES =========

    /**
     * Un vehículo puede tener varios tanques (si manejas ese módulo).
     */
    public function tanque()
    {
        return $this->hasOne(\App\Models\Tanque::class);
    }

    public function tanques()
    {
        return $this->hasMany(\App\Models\Tanque::class, 'vehiculo_id');
    }

    /**
     * Verificaciones vehiculares asociadas.
     */
    public function verificaciones()
    {
        return $this->hasMany('App\Models\Verificacion');
    }

    /**
     * Cargas de combustible realizadas por este vehículo.
     * Clave foránea por convención: cargas_combustible.vehiculo_id
     */
    public function cargasCombustible()
    {
        return $this->hasMany('App\Models\CargaCombustible');
    }

    /**
     * La tarjeta SiVale asignada al vehículo.
     * Clave foránea: vehiculos.tarjeta_si_vale_id → tarjetas_sivale.id
     */
    public function tarjetaSiVale()
    {
        return $this->belongsTo(TarjetaSiVale::class, 'tarjeta_si_vale_id');
    }

    /**
     * Fotos del vehículo (ordenadas por 'orden' y luego por fecha desc).
     */
    public function fotos()
    {
        return $this->hasMany(VehiculoFoto::class)
                    ->orderBy('orden')
                    ->orderByDesc('created_at');
    }

    // ========= SCOPES =========

    /**
     * Filtro principal (búsqueda y filtros por campo).
     */
    public function scopeFilter($query, array $filters = [])
    {
        if (!empty($filters['search'])) {
            $term = trim($filters['search']);
            $query->where(function ($q) use ($term) {
                $like = '%' . str_replace('%', '\\%', $term) . '%';
                if (is_numeric($term)) {
                    $q->orWhere('id', (int)$term);
                }
                $q->orWhere('unidad', 'like', $like)
                  ->orWhere('placa', 'like', $like)
                  ->orWhere('serie', 'like', $like)
                  ->orWhere('anio', 'like', $like)
                  ->orWhere('propietario', 'like', $like)
                  // 👇 incluimos las pólizas en la búsqueda global
                  ->orWhere('poliza_hdi', 'like', $like)
                  ->orWhere('poliza_latino', 'like', $like)
                  ->orWhere('poliza_qualitas', 'like', $like);
            });
        }

        if (!empty($filters['id']))          $query->where('id', (int)$filters['id']);
        if (!empty($filters['unidad']))      $query->where('unidad', 'like', '%' . $filters['unidad'] . '%');
        if (!empty($filters['placa']))       $query->where('placa', 'like', '%' . $filters['placa'] . '%');
        if (!empty($filters['serie']))       $query->where('serie', 'like', '%' . $filters['serie'] . '%');
        if (!empty($filters['propietario'])) $query->where('propietario', 'like', '%' . $filters['propietario'] . '%');
        if (!empty($filters['marca']))       $query->where('marca', $filters['marca']);

        if (!empty($filters['anio'])) {
            $query->where('anio', $filters['anio']);
        } else {
            if (!empty($filters['anio_min'])) $query->where('anio', '>=', (int) $filters['anio_min']);
            if (!empty($filters['anio_max'])) $query->where('anio', '<=', (int) $filters['anio_max']);
        }

        // 👇 Filtros por odómetro
        if (isset($filters['kilometros']) && $filters['kilometros'] !== '') {
            $query->where('kilometros', (int)$filters['kilometros']);
        }
        if (isset($filters['km_min']) && $filters['km_min'] !== '') {
            $query->where('kilometros', '>=', (int)$filters['km_min']);
        }
        if (isset($filters['km_max']) && $filters['km_max'] !== '') {
            $query->where('kilometros', '<=', (int)$filters['km_max']);
        }

        return $query;
    }

    /**
     * Ordenamiento seguro por columnas permitidas.
     */
    public function scopeSort($query, ?string $by, ?string $dir = 'asc')
    {
        $dir = strtolower($dir) === 'desc' ? 'desc' : 'asc';

        $whitelist = ['id','unidad','placa','serie','anio','propietario','marca','kilometros','created_at'];

        if ($by && in_array($by, $whitelist, true)) {
            return $query->orderBy($by, $dir);
        }

        return $query->orderBy('created_at', 'desc');
    }
}

routes web:

<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/* ================================
 | Controllers
 *=============================== */
use App\Http\Controllers\AdminBackupController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\CalendarioVerificacionController;
use App\Http\Controllers\CapturistaController;
use App\Http\Controllers\CargaCombustibleController;
use App\Http\Controllers\CargaFotoWebController;
use App\Http\Controllers\ComodinGastoController;
use App\Http\Controllers\LicenciaArchivoController;
use App\Http\Controllers\LicenciaConducirController;
use App\Http\Controllers\OperadorController;
use App\Http\Controllers\OperadorFotoController;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\ProgramaVerificacionController;
use App\Http\Controllers\ReporteController;
use App\Http\Controllers\TanqueController;
use App\Http\Controllers\TarjetaComodinController;
use App\Http\Controllers\TarjetaSiValeController;
use App\Http\Controllers\VehiculoController;
use App\Http\Controllers\VehiculoFotoController;
use App\Http\Controllers\VerificacionController;
use App\Http\Controllers\VerificacionReglaController;
use App\Http\Controllers\PrecioCombustibleController;

use App\Services\TelegramNotifier;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
| - Rutas públicas (welcome, forgot password)
| - Rutas autenticadas (dashboard, perfil)
| - Rutas por rol (administrador, capturista)
| - Recursos anidados con scopeBindings
| - Convenciones de nombres y parámetros
|
| Nota: Se definen patrones globales numéricos para IDs.
*/

/* ------------------------------------------------------------------ */
/* Patrones globales de parámetros (IDs numéricos)                    */
/* ------------------------------------------------------------------ */
Route::pattern('operador', '\d+');
Route::pattern('vehiculo', '\d+');
Route::pattern('verificacion', '\d+');
Route::pattern('tanque', '\d+');
Route::pattern('tarjeta', '\d+');            // SiVale
Route::pattern('tarjeta_comodin', '\d+');    // Tarjeta Comodín
Route::pattern('gasto', '\d+');
Route::pattern('carga', '\d+');
Route::pattern('foto', '\d+');
Route::pattern('verificacion_regla', '\d+'); // Regla de verificación
Route::pattern('archivo', '\d+');            // Archivos de licencia

/* ------------------------------------------------------------------ */
/* Rutas públicas                                                     */
/* ------------------------------------------------------------------ */
Route::view('/', 'welcome')->name('welcome');

Route::middleware('guest')->group(function () {
    Route::get('/forgot-password',  [PasswordResetLinkController::class, 'create'])->name('password.request');
    Route::post('/forgot-password', [PasswordResetLinkController::class, 'store'])->name('password.email');
});

/* ------------------------------------------------------------------ */
/* Rutas autenticadas                                                 */
/* ------------------------------------------------------------------ */
Route::middleware('auth')->group(function () {

    /* -------------------------- Dashboard -------------------------- */
    Route::view('/dashboard', 'dashboard')->middleware('verified')->name('dashboard');

    /* ----------------------- Perfil de usuario --------------------- */
    Route::prefix('profile')->name('profile.')->group(function () {
        Route::get('/',    [ProfileController::class, 'edit'])->name('edit');
        Route::patch('/',  [ProfileController::class, 'update'])->name('update');
        Route::delete('/', [ProfileController::class, 'destroy'])->name('destroy');
    });

    /* ------------------------- Notificaciones ---------------------- */
    Route::name('notificaciones.')->prefix('notificaciones')->group(function () {
        // Últimas no leídas (máx. 8)
        Route::get('/nuevas', function (Request $request) {
            $user  = $request->user();
            $items = $user->unreadNotifications()
                ->latest()
                ->take(8)
                ->get()
                ->map(function ($n) {
                    return [
                        'id'      => $n->id,
                        'titulo'  => data_get($n->data, 'titulo', 'Notificación'),
                        'mensaje' => data_get($n->data, 'mensaje', ''),
                        'url'     => data_get($n->data, 'url', route('cargas.index')),
                        'fecha'   => optional($n->created_at)->diffForHumans(),
                    ];
                });

            return response()->json([
                'count' => $user->unreadNotifications()->count(),
                'items' => $items,
            ]);
        })->name('nuevas');

        // Marcar una notificación como leída
        Route::post('/{id}/leer', function (Request $request, $id) {
            $n = $request->user()->notifications()->where('id', $id)->firstOrFail();
            $n->markAsRead();
            return response()->noContent();
        })->name('leer');
    });

    /* =============================================================== */
    /*   SOLO ADMINISTRADORES                                          */
    /* =============================================================== */
    Route::middleware('role:administrador')->group(function () {

        /* Capturistas */
        Route::resource('capturistas', CapturistaController::class);

        /* Backups */
        Route::prefix('admin/backup')->name('admin.backup.')->group(function () {
            Route::get('/',            [AdminBackupController::class, 'index'])->name('index');
            // POST => evita ejecuciones por prefetch/bots
            Route::post('/download',   [AdminBackupController::class, 'download'])->name('download');
            Route::post('/restore',    [AdminBackupController::class, 'restore'])->name('restore');
        });
    });

    /* =============================================================== */
    /*   ADMINISTRADOR | CAPTURISTA                                    */
    /* =============================================================== */
    Route::middleware('role:administrador|capturista')->group(function () {

        /* --------------------- Recursos base ------------------------ */
        Route::resource('operadores', OperadorController::class)
            ->parameters(['operadores' => 'operador']);

        Route::resources([
            'vehiculos' => VehiculoController::class,
            'tarjetas'  => TarjetaSiValeController::class, // parámetro {tarjeta}
        ]);

        Route::resource('verificaciones', VerificacionController::class)
            ->parameters(['verificaciones' => 'verificacion']);

        Route::resource('cargas', CargaCombustibleController::class)
            ->parameters(['cargas' => 'carga']);

        /* -------------------- Tanques por Vehículo ------------------ */
        Route::scopeBindings()->group(function () {
            Route::resource('vehiculos.tanques', TanqueController::class)->except(['show']);
        });

        /* ----------------- Tarjetas Comodín y Gastos ---------------- */
        Route::resource('tarjetas-comodin', TarjetaComodinController::class);

        // Listado global de gastos (filtrable por ?tarjeta=ID)
        Route::get('comodin-gastos', [ComodinGastoController::class, 'index'])->name('comodin-gastos.index');

        // Gastos anidados a Tarjeta Comodín (shallow ed/act/del)
        Route::scopeBindings()->group(function () {
            Route::resource('tarjetas-comodin.gastos', ComodinGastoController::class)
                ->only(['create', 'store', 'edit', 'update', 'destroy'])
                ->shallow();
        });

        /* ---------------------- Fotos: Vehículos -------------------- */
        Route::prefix('vehiculos')->name('vehiculos.')->scopeBindings()->group(function () {
            Route::get('{vehiculo}/fotos',            [VehiculoFotoController::class, 'index'])->name('fotos.index');
            Route::post('{vehiculo}/fotos',           [VehiculoFotoController::class, 'store'])->name('fotos.store');
            Route::delete('{vehiculo}/fotos/{foto}',  [VehiculoFotoController::class, 'destroy'])->name('fotos.destroy');
        });
        // Visualización directa por ID
        Route::get('vehiculos/fotos/{foto}', [VehiculoFotoController::class, 'show'])->name('vehiculos.fotos.show');

        /* ---------------------- Fotos: Operadores ------------------- */
        Route::prefix('operadores')->name('operadores.')->scopeBindings()->group(function () {
            Route::get('{operador}/fotos',            [OperadorFotoController::class, 'index'])->name('fotos.index');
            Route::post('{operador}/fotos',           [OperadorFotoController::class, 'store'])->name('fotos.store');
            Route::delete('{operador}/fotos/{foto}',  [OperadorFotoController::class, 'destroy'])->name('fotos.destroy');
        });
        // Visualización directa por ID
        Route::get('operadores/fotos/{foto}', [OperadorFotoController::class, 'show'])->name('operadores.fotos.show');

        /* ------------------------ Fotos: Cargas --------------------- */
        Route::prefix('cargas')->name('cargas.')->group(function () {
            // Visualización directa por ID (protegida)
            Route::get('fotos/{foto}',         [CargaFotoWebController::class, 'show'])->name('fotos.show');
            // Subir/Borrar foto de una carga
            Route::post('{carga}/fotos',       [CargaFotoWebController::class, 'store'])->name('fotos.store');
            Route::delete('{carga}/fotos/{foto}', [CargaFotoWebController::class, 'destroy'])->name('fotos.destroy');

            // Aprobar carga (POST)
            Route::post('{carga}/aprobar', [CargaCombustibleController::class, 'approve'])->name('approve');
        });

        /* ---------------- Calendario de Verificación ---------------- */
        Route::resource('calendarios', CalendarioVerificacionController::class)
            ->parameters(['calendarios' => 'calendario'])
            ->names('calendarios');

        /* ------------- Reglas de Verificación + Periodos ------------ */
        Route::prefix('verificacion-reglas')->name('verificacion-reglas.')->group(function () {

            // Endpoint JSON primero para evitar choques
            Route::get('/estados-disponibles', [VerificacionReglaController::class, 'estadosDisponibles'])
                ->name('estados-disponibles');

            // CRUD
            Route::get('/',                          [VerificacionReglaController::class, 'index'])->name('index');
            Route::get('/create',                    [VerificacionReglaController::class, 'create'])->name('create');
            Route::post('/',                         [VerificacionReglaController::class, 'store'])->name('store');
            Route::get('/{verificacion_regla}/edit', [VerificacionReglaController::class, 'edit'])->name('edit');
            Route::put('/{verificacion_regla}',      [VerificacionReglaController::class, 'update'])->name('update');
            Route::delete('/{verificacion_regla}',   [VerificacionReglaController::class, 'destroy'])->name('destroy');

            // Generación de periodos
            Route::get('/{verificacion_regla}/generar',  [VerificacionReglaController::class, 'generarForm'])->name('generar.form');
            Route::post('/{verificacion_regla}/generar', [VerificacionReglaController::class, 'generar'])->name('generar');
        });

        /* --------------------- Programa Verificación ---------------- */
        Route::prefix('programa-verificacion')->name('programa-verificacion.')->group(function () {
            Route::get('/',        [ProgramaVerificacionController::class, 'index'])->name('index');
            Route::post('/marcar', [ProgramaVerificacionController::class, 'marcar'])->name('marcar');
        });

        /* --------------------------- Reportes ----------------------- */
        // Vista principal (Dashboard de reportes)
        Route::get('/reportes', [ReporteController::class, 'index'])->name('reportes.index');

        // JSON API (se mantienen las rutas exactas, ahora con nombres)
        Route::prefix('api/reportes')->name('reportes.api.')->group(function () {
            Route::get('/rendimiento',  [ReporteController::class, 'rendimientoJson'])->name('rendimiento');
            Route::get('/costo-km',     [ReporteController::class, 'costoKmJson'])->name('costo_km');
            Route::get('/auditoria',    [ReporteController::class, 'auditoriaJson'])->name('auditoria');
            Route::get('/verificacion', [ReporteController::class, 'verificacionJson'])->name('verificacion');
        });

        // Exportación PDF (se conservan endpoints; se agregan nombres)
        Route::prefix('reportes')->name('reportes.export.')->group(function () {
            // Rendimiento (GET/POST)
            Route::match(['get','post'], '/rendimiento/export.pdf',  [ReporteController::class, 'exportRendimientoPdf'])->name('rendimiento_pdf');

            // Costo por km (GET/POST)
            Route::match(['get','post'], '/costo-km/export.pdf',     [ReporteController::class, 'exportCostoKmPdf'])->name('costo_km_pdf');

            // Auditoría (GET/POST)
            Route::match(['get','post'], '/auditoria/export.pdf',    [ReporteController::class, 'exportAuditoriaPdf'])->name('auditoria_pdf');

            // Verificación (GET/POST)
            Route::match(['get','post'], '/verificacion/export.pdf', [ReporteController::class, 'exportVerificacionPdf'])->name('verificacion_pdf');
        });

        /* -------------------- Licencias de Conducir ----------------- */
        // CRUD principal
        Route::resource('licencias', LicenciaConducirController::class);

        // Archivos asociados a licencias (subir / ver / descargar / eliminar)
        Route::prefix('licencias')->name('licencias.archivos.')->group(function () {
            Route::post('{licencia}/archivos',                 [LicenciaArchivoController::class, 'store'])->name('store');
            Route::delete('archivos/{archivo}',                [LicenciaArchivoController::class, 'destroy'])->name('destroy');
            Route::get('archivos/{archivo}/download',          [LicenciaArchivoController::class, 'download'])->name('download');
            Route::get('archivos/{archivo}/inline',            [LicenciaArchivoController::class, 'inline'])->name('inline');
        });

        Route::get('/precios-combustible', [PrecioCombustibleController::class, 'index'])
        ->name('precios-combustible.index');

    // CRUD básico
    Route::post('/precios-combustible', [PrecioCombustibleController::class, 'store'])
        ->name('precios-combustible.store');

    Route::put('/precios-combustible/{precioCombustible}', [PrecioCombustibleController::class, 'update'])
        ->name('precios-combustible.update');

    // Endpoints para modal/AJAX
    Route::get('/precios-combustible/json', [PrecioCombustibleController::class, 'current'])
        ->name('precios-combustible.current');

    Route::post('/precios-combustible/bulk', [PrecioCombustibleController::class, 'upsertMany'])
        ->name('precios-combustible.bulk');

    // (Opcional) Recalcular costo_tanque_lleno después de cambiar precios
    Route::post('/precios-combustible/recalcular-tanques', [PrecioCombustibleController::class, 'recalc'])
        ->name('precios-combustible.recalc');
    });
});

/* ------------------------------------------------------------------ */
/* Ruta de prueba para Telegram                                       */
/* ------------------------------------------------------------------ */
Route::middleware('auth')->get('/debug/telegram', function (TelegramNotifier $tg) {
    $ok = $tg->send("✅ <b>Prueba</b> de notificación desde Laravel.\n<i>Si ves esto, ya estamos listos.</i>");
    return $ok ? '✅ Enviado a Telegram' : '❌ No se pudo enviar (revisa logs).';
})->name('debug.telegram');

/* ------------------------------------------------------------------ */
/* Auth scaffolding (login, register, etc.)                           */
/* ------------------------------------------------------------------ */
require __DIR__ . '/auth.php';

